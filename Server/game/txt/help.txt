& help
  This is the RhostMUSH online help facility.
  
  "And remember, if it's not RhostMUSH, it's Mud." -- Corum
 
  Notes on help descriptions: 
        [text] - Text enclosed in []'s is optional.  The []'s are never typed
                 in as part of the command.
        <parameter> - Information parameter for a command.  The <>'s are
                      never typed in as part of the command.
 
  Syntax of help command:          help [<command>]
 
  To get a list of RhostMUSH topics:    help topics
  To get a list of RhostMUSH Commands:  help commands      (or @list commands)
  To get a list of RhostMUSH Functions: help function list (or @list function)
  To get a list of on-line RhostMUSH commands: +help
  
  You may use '*' or '?' for wildcard searches on topics.
  
  You may use the /search switch for content searching.  Eg: help/search *mail*
  
  Command syntax help is available by issuing /syntax. Eg: @emit/syntax
  
  If there are any errors in the help text, please notify a Wizard.
  An HTML version of all the help contained here is available at
  http://rhostmush.com/autohelp/help.html
  
& +help
  If enabled (please check @list options), this will work just like normal
  'help' does, but for +help.  This is intended for TINY/MUX compatibility
  and is disabled by default.
  
  The /search switch works for +help as well.
  
& co
& cd
& ch
  Command: co <name> <password>
           cd <name> <password>
           ch <name> <password>
  
  These commands are only useful on the connect screen.  They are used to
  connect to your account <name> with the provided <password>.  There are
  currently three methods to do so.
  
  They are as follows:
     co  -- This option is the default and normal method to connect.
            This option has no special conditions or privilages.
     ch  -- Wizards and anyone with the NOWHO @power (to @hide) can use this.
            This option will auto-hide the player when connecting.
            It defaults to the 'co' option if you can't @hide.
     cd  -- Wizards and higher can use this to connect dark to the game.
            This effectively connects wiz-cloaked to the game.
            Immortals get auto-added to supercloak.
  
  See Also: @aconnect, @adisconnect, @hide
            
& commands
  Help available for RhostMUSH Commands:
   
  ]          "            :            ;            &              #
  \\         >
  
  +channel   doing        drop         enter        examine        folder     
  get        give         goto         grab         help           +help 
  idle       INFO         inventory    join         kill           leave      
  listen     LOGOUT       look         lpage        mail           move       
  mrpage     news         OUTPUTPREFIX OUTPUTSUFFIX page           pose       
  QUIT       read         rpage        say          score          SESSION    
  smell      take         taste        think        throw          touch      
  train      use          version      wield        whisper        who        
  worn
  
  @@         @break       @chown       @clone       @create        @decompile
  @destroy   @dig         @doing       @dolist      @drain         @edit 
  @emit      @entrances   @eval        @extansi     @femit         @find      
  @force     @fpose       @fsay        @halt        @hide          @include
  @last      @link        @list        @listmotd    @lfunction     @lock      
  @mailsig   @mvattr      @name        @notify      @oemit         @open      
  @parent    @password    @pemit       @pipe        @program       @protect   
  @ps        @quitprogram @quota       @register    @robot         @search    
  @set       @skip        @sql         @sqlconnect  @sqldisconnect @stats     
  @sudo      @sweep       @switch      @teleport    @trigger       @unlink    
  @unlock    @verb        @wait        @wall        @wipe        
  
{ 'help commands2' for more (attribute-commands) }
& commands2
  Help available for RhostMUSH Commands (continued):
 
  @aahear    @aclone      @aconnect    @adescribe  @adfail       @adisconnect
  @adrop     @aefail      @aenter      @afail      @agfail       @ahear
  @akill     @aleave      @alfail      @alias      @amhear       @amove
  @ansiname  @apay        @arfail      @asfail     @asuccess     @atfail    
  @atofail   @atport      @aufail      @ause       @away         @caption 
  @charges   @conformat   @cost        @cpattr     @describe     @dfail
  @door      @drop        @ealias      @efail      @enter        @exitformat
  @fail      @filter      @forwardlist @gfail      @grep         @guild 
  @idesc     @idle        @infilter    @inprefix   @kill         @lalias    
  @leave     @lfail       @listen      @move       @nameformat   @odescribe 
  @odfail    @odrop       @oefail      @oenter     @ofail        @ogfail    
  @okill     @oleave      @olfail      @omove      @opay         @orfail    
  @osuccess  @otfail      @otofail     @otport     @oufail       @ouse
  @oxenter   @oxleave     @oxtport     @pay        @prefix       @race      
  @reject    @rfail       @runout      @salisten   @sasmell      @sataste
  @satouch   @saystring   @selfboot    @sex        @sfail        @slisten     
  @solisten  @sosmell     @sotaste     @sotouch    @ssmell       @startup   
  @staste    @stouch      @success     @tfail      @titlecaption @tofail
  @toggle    @tport       @ufail       +uptime     @use          @whereall  
  @whereis   @zone        
  
  
  See Also: @list
  
& topics
  Help available on the following Topics:
 
  ALT INVENTORIES     ALTNAMES          ANSINAMES            ARBITRARY COMMANDS
  ATTRIBUTE USELOCKS  ATTRIBUTE FLAGS   ATTRIBUTE OWNERSHIP  ATTRIBUTE TREES
  BANG NOTATION       BEING KILLED      BOGUS COMMANDS       BOOLEAN VALUES    
  CHANGES             CHANNEL           COLORS               COMMAND EVALUATION
  CONTROL             COPYRIGHT         COSTS                CREDITS         
  CLUSTERS            DROP-TO           ENACTOR              EXITS           
  FAILURE             FLAG ALIAS        FLAG LIST            FLAGS           
  FUNCTION ALIASES    FUNCTION LIST     FUNCTION TYPES       FUNCTIONS       
  GENDER              GOALS             GUESTS               HERE              
  HOMES               LINKING           LISTENING            LISTS            
  LOOPING             MAIL              ME                   MONEY          
  MOVING              OBJECT TYPES      PARENT OBJECTS       PUPPETS       
  QUICKREFERENCE      REALITY LEVELS    REGEXPS              REGEXP SYNTAX    
  REGEXP CLASSES      REGEXP EXAMPLES   ROBBERY              ROYALTY          
  SEARCH CLASSES      SEMAPHORES        SENSES               SETQ_TEMPLATES   
  SQL                 SQLESCAPE         SIDEEFFECTS          SINGLETHREADING  
  SPOOFING            STACK             SUBSTITUTIONS        SUCCESS          
  SWITCHES            TOGGLES           USEFUL               USER ATTRIBUTES  
  VARIABLE EXITS      VATOVZ            VERBS                WANDERER         
  ZATOZZ              ZONES             $-COMMANDS           #LAMBDA
  
& NEW USERS
& GUESTS
  Guests are considered a temporary player bit on a mush.  They have severely
  limited access and are essentially a look but do not touch type of player.
  
  As a guest, you can interact with the mush and the playerbase, but you can
  not leave any lasting information into the game.  This includes, but is not
  limited to sending mail, setting attributes, building of any type, altering
  any data within the mush (except for global commands that the wizzes allow),
  or setting/altering your player character in any way.
  
  If you wish to have a more flexible account, we recommend creating a player
  then going through the methods on the mush to register your player or
  whatever method they have for becoming a member player of that mush.
  
  Remember, guests CAN NOT MAIL.  This is something that will likely cause
  confusion regardless of what game you are on.  This is also intentional.
  
& SQL
  SQL is available in two flavors in RhostMUSH, both are built in and both can
  be ran at the same time.  
  
  SQLITE:  
  This is a 'lite' form of SQL.  It has a good solid base, but doesn't offer
  some of the more advanced features that MySQL/MariaDB has.  The hosting
  server must have a workign SQLITE library to successfully link to and use
  this database offering.
  
  MySQL/MariaDB:
  This is an advanced form of SQL.  It allows all the feature-rich
  capabilities of a fully function SQL engine.  The hosting server must have
  mysql or mariadb to be able to link to and use this offering.
  
  See Also: sqlite_query(), @sql, @sqlconnect, @sqldisconnect, sql(), sqlon,
            sqloff(), sqlping()

& CLUSTERS
  Clusters are a method to have 1 or more real dbref#'s defined as a single
  virtual 'container' or entity to house attributes.  Using cluster related
  commands and functions, you can target any dbref# contained in a cluster
  and it will reference the cluster as a whole.  This is useful for shared
  attribute storage, large data warehousing, or role play/player based
  statistical information where you need a large variety of attributes
  to be housed over a period of time.  The attributes are written to
  the cluster in a weighted method and not a round robin where the item
  in the cluster chosen is always the one with the least number of 
  attributes.
  
  Clusters require wizard access to create, but can be added to by the
  cluster themselves.  You must control both the cluster and the item
  to be added to the cluster to add to the cluster.
  
  See Also:  @cluster, cluster functions

& CLUSTER COMMANDS
  Currently the only cluster command is @cluster.  This topic is intended
  for future growth of the cluster environment.
  
  See Also: @cluster, cluster functions
  
& SETQ_TEMPLATES
  You can specify 'templates' for setq registers to automatically have 
  pre-defined labels for each individual object.  This is done by setting
  a string in the attribute 'SETQ_TEMPLATE' on the object.  The attribute
  should be in the format:  <register>:<string>
  
  So an example would be:   0:foobar 1:xyzzy q:myqreg
  
  This would set a template on an object where it would preassign the
  label 'foobar' to register 0, 'xyzzy' to register 1, and 'myqreg' to
  register q.
  
  Note:  These are only useful for the immediate calling $commands.
  They are not transversed through u() functions, @triggers, or other
  action based events.
  
  You may redefine these labels as you would normally with nameq(), 
  setq(), or setr().
  
  See Also: nameq(), setq(), setr()
  
& #LAMBDA
  Object type: #lambda
  
  In any function that accepts #obj/attr pairs, you may substitute the
  object dbref# with '#lambda'.  This basically says 'take the string after
  as a literal and not an attribute'.
  
  For example:
    > @va #123=Testing
    Set.
    > say get(#123/va)
    You say "Testing"
    > say get(#lambda/va)
    You say "va"
    > say u(#lambda/Testing: %%0,Boo!)
    You say "Testing: Boo!"
    
& SINGLETHREADING
  You can accomplish 'single-threading' $commands by setting the attribute
  on the object SINGLETHREAD.  Once set, you must have at the end of the
  processing a way to set the attribute !NO_COMMAND, else that $command
  will no longer be executable until the attribute's NO_COMMAND flag is
  removed.
  
  You may globally set the attribute SINGLETHREAD as well.
  
& BANG NOTATION
  Bang notation allows you to use '!' and '!!' in functions for 'not' and
  'not-not' functionality.  This works similiarilly to the C equivelant of
  using 'bangs'.  You may also specify '!$' and '!!$' for FALSE or TRUE
  conditions on functions that return string values.  Finally, you may
  specify '!^' and '!!^' for true-boolean FALSE or TRUE conditions on
  functions that return true-boolean based on the function t()'.
  
  
  Example:
    > say match(one two three four five,four)
    You say "4"
    > say !match(one two three four five,four)
    You say "0"
    > say !!match(one two three four five,four)
    You say "1"
    > say !!$grab(this is a test,was)
    You say "0"
    > say !!$grab(this is a test,this)
    You say "1"
    > say !!^space(1000)                  (spaces are non-boolean strings)
    You say "0"
    > say !!$space(1000)                  (spaces are not-null strings)
    You say "1" 
  
  Bang notation may or may not be enabled based on the RhostMUSH that you are
  on.  Please check @list options to see if it is currently enabled.
  
& VARIABLE EXITS
  Variable exits are done somewhat differently than Penn and TinyMUSH3.  First,
  it doesn't matter where the exit is linked to (though we suggest you do link
  it somewhere *grin*).  You then @toggle the exit VARIABLE.  It will then 
  check the @exitto attribute on the exit for the destination.  If the 
  destination is not a valid location ('home' or a valid dbref# that can be 
  linked to) it will fail to allow the target through the exit and return an 
  error message.
  
  See Also: @exitto, variable toggle
  
& REALITY LEVELS
  RhostMUSH supports reality levels.  To see if the rhostmush you are on has
  them currently enabled, please check @list options.  Reality levels are
  useful for multiple views for permissions.   This is exceptionally handy
  when dealing with role play environments where various races, guilds, or
  special beings require special views, looks, descriptions, or other
  permission levels.  An example would be the World of Darkness umbra.
  
& SIDEEFFECTS
  RhostMUSH supports side-effect functions.  This has to be enabled by
  the site owner before they can be used.  In addition, due to the many
  security issues that arise from using side-effects, before the 
  function is accessable, it must be set SIDEFX.
  
  Please check @list options to see if side effects are enabled and
  what side effects are enabled of the list.  list(), being relatively
  harmless in how it's coded, is omitted from the restrictions 
  found with normal side-effects.
  
  MUX and PENN style sideeffects are both supported.  Support for the
  force(), trigger() and wait() functions found in TinyMUSH 3.0 will 
  NOT be supported ever.  They're silly functions to add and the
  security issues involved with these functions are too large to ignore.
  
  NOTE:  Side-effects are generally frowned upon and should not be used
         at all.  This was only done for compatibility.
  
  Type '@list options' to see what side-effects are currently in effect.
    
  MUX sideeffects supported:   TEL, SET, PEMIT, CREATE, LIST, and LINK
  PENN sideeffects supported:  TEL, SET, PEMIT, CREATE, LINK, DIG, OPEN, EMIT,
                               LEMIT, OEMIT, CLONE, LOCK, PARENT, NAME,
                               WIPE, ZEMIT, and REMIT
  OTHER sideeffects supported: DESTROY, TOGGLE, TXLEVEL, RXLEVEL, RSET, 
                               and MOVE
  DATABASE sideeffects supported: SQLITE_QUERY
  
  Help is available on MUX, PENN and OTHER side-effects by name.
  
& ALT INVENTORIES
  RhostMUSH has the option of allowing alternate inventories.  Alternate
  inventories are seen by the 'worn' and 'wielded' commands.  There are
  various ways to configure this that wizards have to do but to see what
  is currently allowed on the mush, type '@list options' and it'll be
  listed in that information.  Items that are wielded will have to be
  toggled WIELDED (by a wizard) and items that are worn will have to
  be toggled WORN (by a wizard).  Sorry, there are no 'wield' or 'wear'
  commands to wield weapons or wear equipment.  It was felt this would
  be too limiting for various enviornments so look to see if there
  exists a specialized +wear or +wield on the mush you are on or talk
  to a local staff about this feature.
  
& ALTNAMES
  RhostMUSH allows alternate names of items.  This is done through the
  '@altname' attribute.  If you pass the lock for altnames (@lock/altname)
  then you will see the true name of the object followed by the altname
  in {}'s.  An example would be:  Book(#123) {Tome}
  
  Both @altname and @lock/altname are wizard only.
  
  This will only effect look.  If you try to reference the altname of 
  the item with any other command, it will not recognize it as a valid
  name.  This is meant to avoid abusiveness.
  
  See Also: look
  
& SENSES
  Senses are the five senses that a human has (keeping 6th sense or other
  perceptuary abilities out of the loop).  These senses are re-enacted with
  the five following commands.
        LOOK   - allows you to view things (mush standard)
                 @desc     - what enactor sees.
                 @adesc    - action that occurs.
                 @odesc    - what everyone but enactor sees.
        TOUCH  - allows you to touch things with following reactions.
                 @stouch   - what enactor sees.
                 @satouch  - action that occurs.
                 @sotouch  - what everyone but enactor sees.
        TASTE  - allows you to taste things with following reactions.
                 @staste   - what enactor sees.
                 @sataste  - action that occurs.
                 @sotaste  - what everyone but enactor sees.
        LISTEN - allows you to hear things with following reactions.
                 @slisten  - what enactor sees.
                 @salisten - action that occurs.
                 @solisten - what everyone but enactor sees.
        SMELL  - allows you to smell things with following reactions.
                 @ssmell   - what enactor sees.
                 @sasmell  - action that occurs.
                 @sosmell  - what everyone but enactor sees.
        
& QUICKREFERENCE
  This space reserved.
  
& COPYRIGHT
  All modifications and changes to the hardcode of this mush called RhostMUSH
  are privileged. Any copying of code in part or in full of the changes we have
  done is not allowed.  If concepts or ideas are borrowed, it is requested
  that permission be gotten first and required that credits be given to this
  mush for ideas gotten from this server.  This text can not be modified,
  changed, or removed on other servers.
  
& VATOVZ
  Command: @va[/<switch>] <object>=<string>
           ...
           @vz[/<switch>] <object>=<string>
  
  This sets attributes VA - VZ (with @va - @vz) on the target object.
  This is in effect just like &VA or &VZ but is provided for older MUSH
  backward compatibility.
  
  Optional switches are /quiet to suppress output or /noisy to give 
  verbose output.
  
  See Also: & 
  
& ZATOZZ
  Command: @za[/<switch>] <object>=<string>
           ...
           @zz[/<switch>] <object>=<string>
  
  This sets attributes ZA - ZZ (with @za - @zz) on the target object.
  This is in effect just like &ZA or &ZZ but is provided for older MUSH
  backward compatibility.
  
  Optional switches are /quiet to suppress output or /noisy to give 
  verbose output.
  
  See Also: &
 
& $-commands
  Please check help on 'ARBITRARY COMMANDS'.  
  
  However, you should be aware that RhostMUSH comes default with $commands
  *NOT* working on players.  Talk to your local administration to see if 
  this option has been enabled or disabled.
  
  See Also: ARBITRARY COMMANDS
  
& colors
  
  RhostMUSH has your standard ANSI sequences and colors.  These can be
  gotten by using the ansi() function, or by using the '%c' substitution.
  You are incapable of seeing ansi sequences without having the ANSI
  flag set.  Furthermore, you are incapable of seeing color without
  having the ANSICOLOR flag set.  Help is available on both of these
  flags.   Please note, that the functions of '%c' and '%x' can be switched
  at runtime.  Check @list options to see which is which.
  
  Do note that if your terminal is not able to display ansi codes, then
  you will not notice any change with either flag.
  
  For more help on the %c substitution, look at SUBSTITUTIONS
  
  See Also: SUBSTITUTIONS, ANSI, ANSICOLOR, XTERMCOLOR, ANSI()
  
& zones
  The RhostMUSH zone system works as follows:
  
  A zone is held together by a Zone Master. A Zone Master is an object or
  room that has it's ZONEMASTER flag set. Once the flag is set, you may
  do several things. To start with, you may decide you want others to
  be able to have their objects join your zone. To do this set up a 
  ZoneToLock on your ZONEMASTER. This lock defaults to false unlike most
  other locks which default to true if they are missing.
 
  You may also want select few people to have control over objects in your
  zone. These people will have wizard-like control within your zone.
  To allow others control and modification ability to objects in your
  zone you would set a ZoneWizLock on your zone master. This lock defaults
  to false if missing (allowing no-one control). Note that you as an owner
  of the zone master must still give yourself explicit zone wizard status
  by putting yourself in the lock.
  
  You may also set a ZONEMASTER, ZONECONTENTS.  This flag will enable
  searching the contents of the Zone Master for matching $commands.
  
  You may also set a ZONEMASTER, ZONEPARENT.  This allows the zonemaster
  to allow its children to inherit attributes off the ZONEMASTER.  An object
  @toggled NOZONEPARENT will not inherit attributes from any zonemaster.
     
  { Type 'help zones2' for more info. }
  
& zones2
  You may also want a VERY select few to be able to alter the zone master
  object itself. To do this set a TwinkLock on the zone master. This lock
  defaults to false. 
  
  Any commands that you place on your zone master object will be searched
  for by objects or players entering commands that are not matched on
  an object local to them if they are essentially in a room of your zone.
  Essentially in your zone means that they or any level of container that
  they are within is physically in a room that is zoned to your zone master.
  The parent of a zone master is not searched for commands when this
  command search occurs.
 
  Once you have set up your zone master, you (or anyone in your 
  zone master's ZoneToLock) may begin to add objects to your zone.
  To do this, use the @zone/add, @zone/del, and @zone/purge commands.
 
  See Also: @zone, @lock, lzone(), ZONEMASTER, ZONECONTENTS, ZONEPARENT
  
& @zone
 Usage:
  1) @zone <object or zonemaster>
  2) @zone/add <object>=<zonemaster>
  3) @zone/del <object or zonemaster>=<zonemaster or object>
  4) @zone/purge <object or zonemaster>
  
  The @zone command adds and removes zone master entries from objects.
  An object may be a member of multiple zones.
 
  * Usage 1 will list the zones an object belongs to, or the objects that
    belong to a zonemaster.
  * Usage 2 will add a zone to an object.
  * Usage 3 will delete an object from a zone, or zone from an object. These
    are essentially the same, but from different directions.
  * Usage 4 will remove all references to zones from an object or
    zone master.  
 
  See Also: @lock, ZONES, lzone(), ZONEMASTER, ZONECONTENTS
  
& changes
  For a list of actual changes, see 'help revis'.
  
  RhostMUSH, first originating in 1989/1990, was founded as a TinyMUD.
  Though the current code runs a MUSH compatible kernal, we still use
  the exact same database from that period.  You will find RhostMUSH
  is nothing like a MUD, MUSH or a MUSE.  It is a hybrid of many systems.
  The coders for RhostMUSH have put a lot of effort into adding changes 
  and modifying the server.  You will find that pretty much any code 
  will work properly here on RhostMUSH.  Another major change is error 
  messages are randomized.  So if you see something strange, you're 
  not being spoofed.  Also, if you notice a strange response, don't 
  think it's a problem.  Talk to a staff person as the option you 
  may be trying may be disabled.
  
  The list of changes done to this server goes beyond any document
  can describe.  The only resemblance this has to TinyMUSH or any
  other variety of server is in its backward compatibility with
  how it parses and functionality returns.
   
  For help on these people, look at CREDITS
  
  See Also: CREDITS
  
& drop
  Command: drop[/<switch>] <object>
           drop[/<switch>] <exit>
 
  The first form removes <object> from your inventory and puts it in your
  location, except for the following special cases: Dropping a STICKY thing
  sends it home, and dropping a thing in a room with a drop-to sends the thing
  to the drop-to location.
 
  The second form removes <exit> from your list of exits and adds it to the
  list of exits for the current location.  Anyone in the same location as
  you may then use the exit to travel to the exit's destination.  You can
  only drop exits when you own the location where you are dropping them.
 
  The following switch is recognized:
     /quiet   - Don't perform the @odrop/@adrop attributes on the dropped
                 object.  This switch only works if you control the object.
   
  'throw' is the same as 'drop'.
  
  See Also: get, @adrop, @drop, @odrop, DROP-TO, STICKY
  
& enter
  Command: enter[/<switch>] <object>
  The enter command is used to enter an object. Insides of objects are best
  used for vehicles, or storage spaces when you don't have a home (or even
  as a floating home).  In order to enter an object you must either own it or
  it must have its ENTER_OK flag set, and you must also pass the object's
  EnterLock (if it has one).
 
  The following switch is recognized:
     /quiet   - Don't perform the @oenter/@aenter or @oefail/@aefail
                attributes on the entered object, and don't perform the
                @oxleave attribute on your current location.  This switch
                only works if you control the object being entered.
 
  See Also: leave, @aefail, @aenter, @efail, @enter, @idesc, @lock, @oefail,
            @oenter, @oxleave, ENTER_OK
  
& examine
  Command: examine[/<switches>] <object>[/<wild-attrib>]
  
  Displays all available information about <object>.  <object> may be an
  object, 'me' or 'here'. You must control the object to examine it, or it
  must be set VISUAL.  If you do not own the object, you will just see the
  name of the object's owner, and optionally any public attributes and 
  attributes owned by you set on the object.
 
  If an attribute is owned by a player other than the owner of the object,
  the number of the attribute owner is shown in parentheses immediately
  following the attribute name.  Flag letters may appear in parentheses also,
  to indicate the status of the attribute.  The list of flag letters that
  show up is shown in 'help examine2'
  
{ 'help examine2' for more }
  
& examine2
  The following flag letters show up with attributes when examined:
    + - The attribute is locked, it does not change ownership when the
        object is @chowned and may not be modified.
    $ - The attribute is not checked when looking for $-commands.  Note
        that the predefined attributes DESC, IDESC, ODESC, FAIL, OFAIL,
        SUCC, OSUCC, DROP, ODROP, SEX, and CHARGES are never checked.
    I - This attribute is not inherited by children of the object.
    V - The attribute is visible to anyone who examines you.  Note that
        the predefined attributes DESC, SEX, and LAST are always VISUAL.
    N - The attribute will not be @cloned.
    n - The attribute will not evaluate %0-%9 ($commands only)
    s - The attribute can not be removed/wiped.
    u - The attribute is set up to handle attribute-based uselocks.
    M - The attribute is dark/inaccessable to anyone below wizard.
    p - The attribute is INVISIBLE but accessable to anyone below wizard.
    G - The attribute is modifiable by #1 only.
    i - The attribute is modifiable by Immortal or higher only.
    W - The attribute is modifiable by Wizard (Royalty) or higher only.
    a - The attribute is modifiable by Councilor (admin) or higher only.
    B - The attribute is modifiable by Architect or higher only.
    g - The attribute is modifiable by Guildmaster or higher only.
  
{ 'help examine3' for more }
  
& examine3
  If expanded looks are enabled (@list options to verify), you may also
  see global attributes on attributes.  These are surrounded by []'s.
  The following global attributes can exist:
    + - The attribute is locked, it does not change ownership when the
        object is @chowned and may not be modified.
    $ - The attribute is not checked when looking for $-commands.  Note
        that the predefined attributes DESC, IDESC, ODESC, FAIL, OFAIL,
        SUCC, OSUCC, DROP, ODROP, SEX, and CHARGES are never checked.
    I - This attribute is not inherited by children of the object.
    V - The attribute is visible to anyone who examines you.  Note that
        the predefined attributes DESC, SEX, and LAST are always VISUAL.
    N - The attribute will not be @cloned.
    n - The attribute will not evaluate %0-%9 ($commands only)
    s - The attribute can not be removed/wiped.
    u - The attribute is set up to handle attribute-based uselocks.
    M - The attribute is dark/inaccessable to anyone below wizard.
    p - The attribute is INVISIBLE but accessable to anyone below wizard.
    G - The attribute is modifiable by #1 only.
    i - The attribute is modifiable by Immortal or higher only.
    W - The attribute is modifiable by Wizard (Royalty) or higher only.
    a - The attribute is modifiable by Councilor (admin) or higher only.
    B - The attribute is modifiable by Architect or higher only.
    g - The attribute is modifiable by Guildmaster or higher only.
  
{ 'help examine4' for more }
& examine4
  If you specify a wildcarded attribute name, then only those attributes
  that match are shown.  So, 'exam me/v?' will show all your attributes that
  start with v and are two characters long.
 
  The following switches are available:
     /brief  - Show everything but the attributes.
     /quick  - When examining an object you don't control, show only the
               owner's name. 
     /full   - When examining an object you don't control, show any public
               attributes set on the object in addition to the owner's name.
     /parent - Includes attributes that are not present on the object itself
               but which are inherited from the object's parent.  This only
               works if you have permission to see it.
     /tree   - Examine per Penn-Tree output separating trees with '`'.
               Only useful with using #obj/attr format.
     /regexp - Use regular expression for wildcard matches.
  
  See Also: look, @decompile, VISUAL, ATTRIBUTE OWNERSHIP, FLAG LIST,
            ATTRIBUTE FLAGs
  
  
& @protect
  Command: @protect[/<switch>] [<player-name>]
  
  This command 'protects' your current user name from being used by anyone
  else.  Essentially this 'locks in' your name so that if you ever switch
  your name to something else, no one else will be able to use the name
  that you have marked for protection.  You have full access to any name
  you protect.  You can only protect your currently active name.  You may
  delete any name you, yourself, have protected.  Wizards may remove any
  protected name.  Immortals bypass protected names.
  
  Switches available:
    /list    - (default) - list the names you current have protected.  This
               does not take any arguments.
    /add     - Add your current name to your protected name list.  This does
               not take any arguments.
    /del     - Remove the specified name from your protected name list.  This
               requires an argument.
    /alias   - Adds the protected name as an alias.  This will work like 
               @alias with regards to player lookups.
    /unalias - This removes the protected name as an alias.  You can not
               remove the active playername as an alias.
  
  Examples:
    > say name(me)
    You say "Bob"
    > @protect/add
    Your current name has been added to your protect list.
    > @protect/del Bob
    You have successfully deleted 'Bob' from your protect list.
  
  See Also: @name, @alias, listprotection()
  
& @program
  Command: @program <player>=<obj/attr>[:<prefix>]
  
  This command allows for small 'programs' within RhostMUSH. To understand this
  command, you must first understand the fact that it completely bypasses any
  commands, built-in or otherwise, and allows you to send user-input directly
  into your code.
   
  A simple example:
   
  @va me=$start:@prog %#=me/vb:Please enter a word:
  @vb me=@emit You entered %0!;@prog %#=me/vc:Please enter another word:
  @vc me=@emit This time, you entered %0. You're done!
   
  > start
  Please enter a word:
  > foobar       (Note that @program literally gives you a '>' prompt.)
  You entered foobar!
  Please enter another word:
  > hoopla
  This time you entered hoopla. You're done!
{ 'help @program2' for more }
 
& @program2 
  As you can see, this command basically takes what a user types at the
  prompt, stuffs it into %0 in the code in <obj/attr>, and then triggers
  that attribute. Note that when @program triggers an attribute, the enactor
  of that triggered attribute is <player>, and is inserted into %#.
  r-registers are NOT preserved when @program triggers an attribute.  This
  is an unfortunate side-effect from allowing @program to be done across
  reboots and shutdowns.  Keep in mind that this will work differently 
  than MUX's @program by splitting up arguments that were seperated by 
  commas into %0 - %9.  Any argument after the 10th is ignored.  
  Check @list options to see if it is using this method, or the MUX method 
  where it's only %0.
   
  An optional message, <prefix>, may be specified and will be output before
  the @program prompt. This is useful for telling the user what information
  they need to supply.
 
  A player caught in @program may send a command through to the normal
  command processor at the @program prompt by prefixing it with the '|'
  character, for example, '|WHO'.  This may be disabled for that particular
  player with the @toggle NOSHPROG or if globally set this way.  Check
  @list options if shelling commands from within a program is allowed.
 
{ 'help @program3' for more }
  
& @program3
  There are extra things you may do with @program that is not avalable
  anywhere else.  
  
  First, @program can be done across @reboots, @shutdowns, QUIT, LOGOUT,
  or (heaven forbid) server crashes.  It remembers where the program was
  last left off at when the player is next on.
  
  Secondly, there are @toggles in junction with @program.
    1.  NOSHPROG -- specifies the target can not use | to access commands
                    outside the program.
    2.  PROG     -- specifies the target can use a @program on someone else
    3   IMMPROG  -- specifies only an immortal can @quitprogram that player.
  
  Third, you can use pre-defined prompts instead of the default '> ' for
  players.  This is done via the @progprompt command.  
    i.e.  @progprompt *player=This is your prompt>
  
  Note that you need to specify the > at the end if you want it.
  
  See @list options to see what config parameters are enabled for @program
  on the RhostMUSH you're at.
  
  Help files borrowed from TinyMUX 2.0 with permission.
  
  See Also: @toggle, @progprompt, @quitprogram
 
& @quitprogram
  Command: @quitprogram <player>
  
  Terminates the @program for player. If <player> is not specified, then it
  works upon the enactor (a player may quit a program while they are in it
  by piping out @quitprogram, see 'help @program').
  
  Example:
    > @quitprogram *TinyPlayer
    @program cleared.
 
  See also: @program, @progprompt.
 
& @progprompt
  Attribute: @progprompt <player>=<string>
  
  This specifies a string (from 1 to 40 characters) that you may specify 
  for a player going through a program instead of the base '-'.  If you 
  specify a 'NULL' as the string, there will be no prompt.  
  
  The @progprompt does not end the string with a >.  If you wish to have
  one, you'll have to add it to the end of the defined prompt.
  
  See Also: @program, @quitprogram
& @fsay
  Command: @fsay <object> = <message>
  Forces <object> (which may be a player) to say <message>.  Can only
  be executed if the enactor controls the object.
  
  See Also: say, @femit, pose
  
& @SELFBOOT
  Command: @selfboot[/<switch>] [<port>]
 
  This command will disconnect all ports except the port that you
  initiate the command from. (IE: it will disconnect your hung logins)
  
  You may specify the following optional switches:
     /list -- Will list what ports you're currently connected on.
     /port -- When specified with the <port> will boot the specific
              connection.
  
  If you have a single connection, it will not boot it.
  
  Note: @selfboot by itself will boot every connection that has a greater
        idle time than the other connection.  Which, if you have two ACTIVE
        connections may not be the result you want :)
   
  See Also: port()
 
& grab
  Command: grab <user>
  
  The command will check your permissions over the target's location and
  over your current location.  If you are found to have control over both
  of those locations, and of the user itself, then the targeted user
  will be brought to your location.
  
  See Also: join, @teleport  
  
& join
  Command: join <user>
  
  The command will check your permissions over the target's location and
  over your current location.  If you are found to have control over both
  of those location, then you are brought to the targeted user's location.
  
  See Also: grab, @teleport
  
& get
  Command: get[/<switch>] <object>
           get[/<switch>] <exit>
           get[/<switch>] <object>'s <sub-object>
  
  The first form picks up <object> from your location and adds it to your
  inventory.  It will fail if the object is locked against you, or if you
  are inside a player or object that you don't control and which isn't
  set ENTER_OK.
 
  The second form takes an exit from your location and adds it to you.
  Anyone inside you may then use the exit to travel to the exit's destination.
  You may take exits that you own, and exits owned by others in locations that
  you own.
 
  The third form takes <sub-object> from <object> and adds it to your
  inventory.  <object> must be ENTER_OK and <sub-object> must not be locked
  against you for this to work.  The lock on <object> is not checked.
  
{ 'help get2' for more }
  
& get2
  The following switch is recognized:
     /quiet   - Don't perform the @osucc/@asucc or @ofail/@afail attributes
                on the target object.  This switch only works if you control
                the object.
 
  <object> and <sub-object> may be either players or things.
  'take' is the same as 'get'.
  
  See Also: drop, @afail, @asucc, @fail, @ofail, @osucc, @succ, ENTER_OK,
            FAILURE, SUCCESS
  
& give
  Command: give <player>=<amount/object>
  Gives player the specified amount of money or <object>. You can't give
  someone money if their new total would be greater than 10000 (No reason to
  get greedy).  You may also give players objects, but the other player must
  be set ENTER_OK to receive something you give. 
  
  See Also: @apay, @cost, @opay, @pay, ENTER_OK
  
& goto
  Command: goto[/<switch>] <direction>
           goto[/<switch>] home
           <direction>
           home
 
  Moves you in the specified direction, assuming that the direction is not
  locked against you.  'move home' is a special command that returns you to
  your home. The word 'move' may be omitted.
 
  The following switch is recognized:
     /quiet   - Don't perform the @osucc/@asucc/@odrop/@adrop or @ofail/@afail
                attributes on the exit being used.  This switch only works if
                you control the exit.
 
  'move' is the same as 'goto'.
  
  See Also: enter, home, leave, move()
  
& inventory
  Command: inventory
  Lists what you are carrying and how much money you have.  If alternate 
  inventories are in effect, anything wielded or worn may not be shown up
  by this inventory.  To see these inventories, use the 'wielded' and
  'worn' commands respectively.
  
  See Also: score, worn, wielded
  
& train
  Command: train
  The train command is used to output to the player what exactly you have 
  typed.  The output is not parsed and is taken verbatum and displayed as
  is. 
  
  Example:
    > train @emit To do addition, type:  say add(1,1) = 2
    YourName types -=> @emit To do addition, type: say add(1,1) = 2
    To do addition, type: say add(1,1) = 2                         
  
  See Also: @emit, pose, @pemit, think, ]
  
& worn
  Command: worn
  If alternate inventories are enabled, this command will show you what is
  currently being 'worn' by yourself.  Things 'worn' are identified by having
  a special wizard @toggle 'WORN' set on them.
  
  See Also: inventory, wielded
  
& wielded
  Command: wielded
  If alternate inventories are enabled, this command will show you what is
  currently being 'wielded' by yourself.  Things 'wielded' are identified by
  having a special wizard @toggle 'WIELDED' set on them.
  
  See Also: inventory, worn
  
& kill
  Command: kill <player> [=<cost>]
  Attempts to kill the specified player. Killing costs <cost> coins, which
  gives you a <cost>% chance of killing the player. Thus, spending 100 
  coins always works (except against wizards and immortals, who can never be
  killed). Players cannot be killed in rooms which have been set HAVEN or
  which they control.  If you don't specify a cost, the default is 10 (for a
  10% chance of success).  The player, if killed, receives <cost>/2 coins in
  insurance.
  
  See Also: @akill, @kill, @okill, BEING KILLED, IMMORTAL, ROYALTY
  
& leave
  Command: leave[/<switch>]
  This command leave allows you to exit an object you have entered, arriving
  in the same location as the object. You may not leave an object if you fail
  that object's LeaveLock (but you may still @teleport out, use an exit inside
  the object, or go home).
 
  The following switch is recognized:
     /quiet   - Don't perform the @oleave/@aleave or @olfail/@alfail
                attributes on the entered object, and don't perform the
                @oxenter attribute on your new location.  This switch
                only works if you control your current location.
 
  See Also: enter, @lock, ENTER_OK, @aleave, @alfail, @leave, @lfail, @oleave,
            @olfail, @oxenter
  
& IDLE
  Command: idle                 (everyone)
           idle @@<string>      (everyone)
           idle <command>	(wizards only)
  
  This command does nothing.  It will issue a NO-OP (non-operation) which 
  allows the user to send information to the mush without actually unidling.
  While using this command your idle state does not change so to other users
  you will appear to be idle.  
  
  If you specify @@<string> then <string> will be displayed to you as if 
  you issued 'think <string>' but without updating your idle time.  
  
  Note:  The <string> is NOT evaluated, intentionally.
  
  This command can only be used if you're connected to the mush.  It can not
  be used if the command has been restricted from you.
  
  Wizards may specify a command to issue under an 'idle state' as an option.
  
  Examples:
    > idle
    > idle @@boo![add(1,1)]
      boo![add(1,1)]
    > idle think Test: [add(1,1)]    (as a wizard)
      Test: 2
  
  See Also: @@

& INFO
  Command: INFO
  This command gives information about the mush both on-line and on the 
  connect screen.  This is to help automations in gathering information about
  the mush like players connected, uptime, version, and so forth.
  
& LOGOUT
  Command: LOGOUT
  Disconnects you from your character without breaking the network connection
  to the game.  You may then log in to another character.  The LOGOUT command
  must be entered in all capitals.
  
  See Also: QUIT
  
& look
  Command: look[/<switches>] [<object>]
  Displays the description of <object>, or the room you're in if you don't
  specify an object.  Specifying object as <name> or #<dbref> or 'me' or
  'here' is legal.  You can also use look to look at objects held by other
  people, just use 'look <person>'s <object>'.
 
  You may use the /outside switch to look at the location of your current
  location (useful if you are inside a vehicle or other object).  You may
  also look at other objects in the 'outer' location, but you may not
  use the possessive form with the /outside switch (IE: "look/outside
  <person>'s <object>" won't work).
  
  'read' is the same as 'look'.
  
  Note: if the @admin parameter name_with_desc is enabled, then you will 
        see the name of the thing before the description.
   
  See Also: @adesc, @describe, @odesc, examine, smell, touch, taste, listen
  
& smell
  Command: smell [<object>]
  Displays the smells of <object>, or the location you're in if you don't
  specify an object.  Specifying object as <name> or #<dbref> or 'me' or
  'here' is legal.  You can also use smell to smell objects held by other
  people.  Just use 'smell <person>'s <object>'.
  
  See Also: look, touch, taste, listen, @ssmell, @sasmell, @sosmell
  
& taste
  Command: taste [<object>]
  Displays the tastes of <object>, or the location you're in if you don't
  specify an object.  Specifying object as <name> or #<dbref> or 'me' or
  'here' is legal.  You can also use taste to taste objects held by other
  people.  Just use 'taste <person>'s <object>'.
  
  See Also: look, smell, touch, listen, @staste, @sataste, @sotaste
  
& think
  Command: think[/<swiches>] <string>
  Returns the string to the enactor at the permission level of the enactor.
  This works just as @pemit me=<string> would work.
  
  The following switches are available:
     /noansi   - Show the string literally and don't process ansi.  Only
                 useful with ZENTY_ANSI enabled (at compiletime).
    
  See Also: @pemit, @emit, say, pose
 
& touch
  Command: touch [<object>]
  Displays the contours of <object>, or the location you're in if you don't
  specify an object.  Specifying object as <name> or #<dbref> or 'me' or
  'here' is legal.  You can also use touch to feel objects held by other
  people.  Just use 'touch <person>'s <object>'.
  
  See Also: look, smell, taste, listen, @stouch, @satouch, @sotouch
  
& listen
  Command: listen [<object>]
  Displays the sounds of <object>, or the location you're in if you don't
  specify an object.  Specifying object as <name> or #<dbref> or 'me' or
  'here' is legal.  You can also use listen to hear objects held by other
  people.  Just use 'listen <person>'s <object>'.
  
  This command is not to be confused with @listen.
  
  See Also: look, smell, touch, taste, @slisten, @salisten, @solisten
  
& move
  Command: move[/<switch>] <direction>
           move[/<switch>] home
           <direction>
           home
 
  Moves you in the specified direction, assuming that the direction is not
  locked against you.  'move home' is a special command that returns you to
  your home. The word 'move' may be omitted.
 
  The following switch is recognized:
     /quiet   - Don't perform the @osucc/@asucc/@odrop/@adrop or @ofail/@afail
                attributes on the exit being used.  This switch only works if
                you control the exit.
 
  'goto' is the same as 'move'.
  
  See Also: enter, home, leave, move()
  
& MOVE()
  Function: move(<target>, <direction>)
  
  This function works like the move command.  It will 'push' the target through
  the direction specified.  Direction is anything that the original 'move'
  command allows.  If target is invalid, doesn't exist, or you have no control
  over it, it returns a permission denied.  The SIDEFX flag is required to use
  this function.
  
  Type @list options to see if this side-effect is enabled.
   
  Example:
    say move(me,home)
    There's no place like home...
    There's no place like home...
    There's no place like home...
    
  See Also: move, goto, @tel, tel(), SIDEEFFECTS
  
  
& news
  *NOTE* :  The old news system ( MUSH standard ) can be found with:
            HELP NEWS OLD NEWS  
   
  News has been greatly modified and hard coded to allow better functionality
  and speed.  The command structure works on a switch system like:
            news/read 
  
  The following topics exist for the news system:
  
       old news       description    technical      changes        general
       info           new user       default group  cmdlist
  
  To get help on the various news subcommands you would use: help news <sub>
  where <sub> is any of the below subcommands:
  
       check          extend         groupinfo      grouplist      groupmem 
       jump           login          post           postlist       postlock  
       repost         read           readlock       status         subscribe
       unsubscribe    userinfo       yank           mailto
  
  For help on the old news system type: help news old news
  For help on any other item listed here type: help news <item>
  
  See Also: news old news, news cmdlist
  
& news cmdlist
  The following is a quick reference list of news commands:
  
  news/check          - Check for unread news in your subscribed groups
  news/extend         - Change the expiration time of an article
  news/grouplist      - List all groups in the system
  news/groupmem       - List the members of a group
  news/jump           - Change the position of your read marker within a group
  news/login          - Log into the news system & perform unread news check
  news/mailto         - Mail a user with the given news item and optional text
  news/post           - Post an article to a group
  news/postlist       - List all of the articles you have posted in all groups
  news/postlock       - Lock a group against certain players posting to it
  news/repost         - Correct mistakes in a news posting
  news/read           - Read articles in a group
  news/readall        - Reads all unread articles (spammy!)
  news/readlock       - Lock a group against certain players reading it
  news/status         - Display listing of article titles within a group
  news/status/verbose - Display ALL articles available within a group
  news/subscribe      - Join a news group or list your subscribed groups
  news/unsubscribe    - Leave a news group
  news/userinfo       - Display statistics about yourself
  news/yank           - Delete an article from a group
  
  Individual help is available on each of these sub commands by typing in:
  help news <switch>.  Example: help news yank
  
& news groupinfo
  Command: news/groupinfo <group>
   
  The groupinfo command provides many details and statistics about the
  specified group. This command is restricted to the group administrator
  and Royalty.
  
  Example:  
    > news/groupinfo general
    (You see a bunch of information on the news group general)
  
  See Also: news subscribe, news userinfo
  
& news yank
  Command: news/yank <group>/<seq>
  
  The yank command allows you to delete an article that you've posted to
  a group. You may wish to do this if you feel that you have said something
  that was better left unsaid or you just completely fubared the text of the
  message. There are some restrictions to this command however: you must
  still pass the postlock of the group, no other articles have been posted
  to the group, and your posting is less than 30 minutes old. These
  restrictions are designed to prevent you from posting something that 
  provokes a response from other users and then later deleting your posting,
  making the other user seem foolish to later readers.
  
  Example:
    > news/yank general/0
    (You see) News: Article 0 yanked from group 'general'
  
  See Also: news repost, news postlist
  
& news userinfo
  Command: news/userinfo
  
  The userinfo command will list the information that is stored about you
  in the news database. This includes the total number of postings you have
  made, the total number of active postings that exist, and the number
  of group subscriptions you have.
  
  Example:
    > news/userinfo
    (You see various information you have concerning the news system)
  
  See Also: news postlist, news subscribe
  
& news unsubscribe
  Command: news/unsubscribe <group>
           news/unsubscribe <player>=<group>
  
  The unsubscribe command has two forms. The first form will remove you 
  from a group. In order for this command to succeed you must be subscribed 
  to the named group. By unsubscribing to a group, you loose your marker 
  within the group. If you should resubscribe, you'll need to use the 
  news/jump command to reposition yourself past the articles that you have 
  already read.  The second version of the command allows the group admin 
  or Royalty to unsubscribe a player from a group.
  
  Example:
    > news/unsubscribe general
    (You see) News: You are now unsubscribed from group 'general'.
  
  See Also: news subscribe, news jump
  
& news subscribe
  Command: news/subscribe 
           news/subscribe <group>
           news/subscribe <player>=<group>
  
  The subscribe command does one of three things. The first version will list
  all of the groups (and their descriptions) that you are subscribed to.
  The second version will subscribe you to a group. In order for the 
  second version to succeed, you must pass either the postlock or the
  readlock of the group. When you subscribe to a group, your marker within
  the group is set to the first active posting in the group. The third
  version allows the group administrator or Royalty to pull users into 
  a group.
  
  Example:
    > news/subscribe general
    (You see) News: You are now subscribed to group 'general'.
  
  See Also: news unsubscribe, news jump
  
& news verbose
  Command: news/status/verbose
  
  The verbose switch is used in junction with the /status switch to list
  all available posts within a given group.  
  
  Please refer to 'help news status' for a complete syntax listing.
  
  See Also: news status
  
& news status
  Command: news/status
           news/status/verbose
           news/status <group>
           news/status/verbose <group>
  
  The status command lists articles within a group. The first two versions
  of this command operate on your default group. If the verbose switch
  is given all articles in the group are listed, otherwise, only unread
  articles are listed. Information included in the list is unread status,
  sequence number within the group, owner name, article title.
  
  Example:
    > news/status
    (You see the status of all unread messages in your current group)
    > news/status/verbose
    (You see the status of all messages in your current group)
    > news/status general
    (You see the status of all unread messages in group 'general')
    > news/status/verbose general
    (You see the status of all messages in group 'general')
  
  See Also: news read, news check, news jump
  
& news read
  Command: news/read
           news/read <seq>
           news/read <group>
           news/read <group>/<seq>
  
  The read command enables you to read the postings within a group. The first
  two versions of this command operate on the group that you read last (your
  default group). If you do not specify a sequence number, your marker within
  the group is used to read the next unread article within that group. Then
  your marker is updated to point to the article which follows the one that 
  you just read. This enables you to use the news/read command to read though
  your entire default group, and the news/read <group> command to switch your
  default group to another one, after which you can continue to use the
  news/read command to read through that group. If you specify a sequence 
  number, then that article is read but your marker in that group is not
  adjusted. This enables you to look around in a group without messing up
  your current read position.
  
  Example:
    > news/read general
    (You see the next unread news item in general if one exists)
    > news/read 5
    (You see news posting #5 of the current group you're in)
    > news/read info/0
    (You see news posting #0 of the group 'info')
   
  See Also: news check, news status
  
& news readall
  Command: news/readall [<group>]
  
  The readall command will read all unread news.  If a group is specified it
  will read all unread news in that particular group.  This is especially handy
  if you have large output buffers and want to read all the news up front.
  
  See Also: news read
  
& news readlock
  Command: news/readlock <group>=<text>
  
  The readlock command sets the reading lock for the designated group. If the
  text is left off, the read lock is removed from the group. The readlock text
  is evaluated similar to the u() function. An unset readlock automatically
  means that any user will pass the lock. When a player attempts to read 
  a group, the text in the group's readlock is evaluated with
  the player as both the invoker and executor of the text. Therefore, 
  references to 'me' and '%#' and '%!' will all refer to the player attempting
  to read. This is done to ensure that there are no security holes in this
  process for a user to exploit since there is no higher level security
  involved than the user itself.
  
  This command is restricted to the group administrator or Royalty and higher.
  
  Example:
    > news/readlock CitizensOnly=match(get(%#/guild),Citizen)
    (You see) News: Read lock set for group 'citizensonly'.
  
  See Also: news postlock
  
& news repost
  Command: news/repost <group>/<seq>/<new title>=<new text>
  
  The repost command allows you to fix any errors that you may find in your
  posting after the fact. You must be the owner of the specified article.
  There are two further restrictions on this command: you must repost before
  any other postings are made to the same group, and you must repost within
  a half an hour of the original posting time. These last two restrictions
  are to ensure that you do not provoke people into responding to your
  article and then change it after the fact, making them look foolish to
  people who read the group later.
  
  Example:
    > news/repost general/0/Reposting=This is the new text blah blah blah
    (You see) News: Article 0 reposted to group 'general', expires (date)
  
  See Also: news yank, news postlist
  
& news post
  Command: news/post <group>/<title>=<text>
  
  The post command posts and article to a group. You must be subscribed to a 
  group and pass it's postlock before this command will be successful. The
  title is mandatory, as well as the text. 
  
  Example:
    > news/post general/MyPost=This is my posting
    (You see) News: Article (number) posted to group 'general', expires (date)
  
  See Also: news yank, news repost
  
& news postlock
  Command: news/postlock <group>=<text>
  
  The postlock command sets the posting lock for the designated group. If the
  text is left off, the post lock is removed from the group. The postlock text
  is evaluated similar to the u() function. An unset postlock automatically
  means that any player will pass the postlock. When a player attempts to post
  or repost to a group, the text in the group's postlock is evaluated with
  the player as both the invoker and executor of the text. Therefore, 
  references to 'me' and '%#' and '%!' will all refer to the player attempting
  to post. This is done to ensure that there are no security holes in this
  process for a user to exploit since there is no higher level security
  involved than the user itself.
  
  Example:
    > news/postlock CitizensOnly=match(get(%#/guild),Citizen)
    (You see) News: Post lock set for group 'citizensonly'.
  
  This command is restricted to the group administrator or Royalty and higher.
  
  See Also: news readlock, news post, news postlist
  
& news postlist
  Command: news/postlist
  
  The postlist command lists the postings that you have made in any and all
  groups. You do not have to be currently subscribed to a group for your
  postings in that group to show up on this list. Once articles expire
  they no longer show up on this list.
  
  Example:
    > news/postlist
    (You see a listing of articles you posted that are still in circulation)
  
  See Also: news yank, news repost
  
& news login
  Command: news/login
  
  The login command is triggered automatically when you log into a RhostMUSH.
  The effects of this command are two-fold. First, if you have never used
  the news system before, you are added to the 'general' and 'info' groups.
  Second, your subscribed news groups are checked for unread news. Any groups
  that contain unread news are listed. Groups that do not contain unread
  news are not mentioned.  This is automatically triggered when you log in.
  
  Example:
    > news/login
    (You see either nothing, or new postings to groups that you belong to)
  
  See Also: news subscribe, news status
  
& news jump
  Command: news/jump
           news/jump <seq>
           news/jump <group>
           news/jump <group>/<seq>
  
  The jump command repositions your marker within a group. The first two
  forms of the command operate on your default group. The last two operate
  on the specified group. The two versions that do not have a <seq> jump
  you to the end of the group, where the ones with the <seq> jump you
  to the specified sequence within the group.
  
  Example:
    > news/jump general/0
    (You see) News: Jumped to position 0 of group 'info'.
  
  This effectively makes your current position you last read to article 0.
  
  See Also: news read
  
& news groupmem
  Command: news/groupmem <group>
  
  The groupmem command lists all of the users who are subscribed to the
  specified group. You must be subscribed to the group to use this command
  (the group administrator and Royalty bypass this restriction).
  
  Example:
    > news/groupmem general
    (You see a huge amount of spam of everyone who belongs to group general)
  
  See Also: news unsubscribe
  
& news grouplist
  Command: news/grouplist
  
  The grouplist command lists the names and descriptions of all groups
  currently defined in the news system.
  
  Example:
    > news/grouplist
    (You see a list of all groups in the news system with descriptions)
  
  See Also: news status
  
& news extend
  Command: news/extend <group>/<seq>=<num days>
 
  The extend command alters the expiration time stamp on an article. The group
  and sequence number of the article are necessary to identify it. The number
  of days may be positive or negative. You may also specify 'forever' and
  the article will never expire.
  
  This command is restricted to group administrators and Royalty.
  
  Example: 
    > news/extend info/0=5
    (You see) News: Expiration on article 0 of group 'info' now (new date)
    > news/extend info/0=forever
    (You see) News: Extending expiration forever on article 0 of group 'info'
  
  See Also: news post  
  
& news check
  Command: news/check
           news/check/verbose 
  
  The check command goes through your list of subscribed groups, and scans
  them for unread news statistics. Without the verbose switch, this command
  shows only those groups that have unread news. With the verbose switch,
  this command shows all of your subscribed groups whether or not they have
  unread news.
  
  Example:
    > news/check
    (You see a list of unread articles in all subscribed groups)
    > news/check/verbose
    (You see a list of all subscribed groups with or without new articles)
  
  See Also: news status
  
& news general
  Topics: GENERAL
  The 'general' news group is a system created group that is designed to be
  the catch all group. If there isn't a more narrowly focused group that is
  more appropriate for the news, it goes in 'general'. Please try not to
  spam or flame on this group as it can get pretty ugly.
  
  See Also: news unsubscribe, news subscribe, news grouplist
  
& news info
  Topics: INFO
  The 'info' news group is a system created group that is designed for the
  administrators of the mush to disseminate information to the rest of the
  users of the system. The 'info' news group can not be unsubscribed from.
  
  See Also: news subscribe, news unsubscribe, news grouplist
  
& news new user
  Topics: NEW USER
  As a new user of the news system, you will need to use either the news/login
  command or the news/subscribe command to make the system aware that you want
  to participate. The first time that you use one of these commands, 
  you will be subscribed automatically to the 'general' and 'info' groups.
  These are system generated groups, please refer to the help files on
  them.
  
  You will first want to become familiar with the news/read, news/check,
  and news/subscribe commands. For help on any of these topics, refer
  to: help news
  
  See Also: news subscribe, news unsubscribe, news grouplist
  
& news default group
  Topics: DEFAULT GROUP
  The default group for a user is defined as the last group in which they
  read news. Your default group changes whenever you change to a different
  group with the news/read command. This enables you to switch your focus 
  amongst your subscribed groups and use the shorter versions of the commands
  in the news system since it can make assumptions as to the group that you
  are interested in targeting.
  
  See Also: news jump, news read, news status
  
& news description
  Topics: DESCRIPTION (1 of 2)
  The hard coded news system allows players to join news groups where they
  may discuss various themed issues. The system is composed of groups,
  users (players), and articles. 
  
  A group has a description, a read lock, a post lock, a set of subscribed
  users, and a set of active articles. Users must pass the read and/or post
  locks of the group to participate in various aspects of the group.
  A group may also be assigned an administrator. The group administrator
  may do several things to the group including subscribing and unsubscribing
  users from the group, setting read and post locks, yank articles, and
  extend article expiration times.
  
  { Type: help news description2 }
  
& news description2
  Topics: DESCRIPTION (2 of 2)
  Users of the system have a list of subscribed groups, as well as links to
  any active postings that they have made. Within each subscribed group,
  the system maintains a marker. This marker denotes the current article
  that the user is on. When the user reads an article in a group, their
  marker for that group is advanced to the next article. Any article that
  has a sequence number below the marker is considered read. The last group
  that the user has read is also recorded, and becomes their 'default' group
  for the purposes of several of the news commands.
  
  Articles in the system belong both to a group and to a user. They also
  expire two weeks after they are posted. The expiration time may be extended
  or reduced or set to never expire. Once an article expires, it is deleted
  from the system and can not be recovered. Articles can be reposted or yanked
  if necessary, however certain criteria must be met (see the help pages).
 
  For further information on how the news system works, please refer to the
  help pages for the topic or command of interest.
  
  See Also: news new user
  
& news technical
  Topics: TECHNICAL (for technical geeks)
  The hard coded news system was modeled after a system that was originally
  written in MUSHcode. This system was named MUSHNews and was written by
  Thorin. The new system, also written by Thorin, has added features and 
  has been engineered to take full advantage of the extended capabilities 
  gained by hardcoding a system into the RhostMUSH server itself.
  
  The news system was written in January of 1997, and consists of
  approximately 5000 lines of C code. It utilizes an ndbm database separate
  from the RhostMUSH database to store all of it's information.
  
  System Limits:
    Group name        length   31 [a-zA-Z][a-zA-Z0-9_.]*
    Article title     length   39 
    Article text      length 3999
  
  For revision history, type: help news changes
  
  See Also: news changes, news descripition
  
& news changes
  Topics: CHANGES
  01/10/1997 Original Version 1.0 by Thorin (Mike McDermott)
  
& news old news
  Topics: OLD NEWS
  Command: news [<topic>]
  Shows you the current news for the MUSH. It is highly recommended that
  you check the news daily for new information.  Otherwise, the wizards will
  have no pity on you for messing up with the new commands.
  
& news mailto
  Command: news/mailto <group>/<seq #> <addr list>=[<subject>//]<text message>
  
  This will allow you to mail the news posting from a given
  group to one or more players.  The group and sequence # must both be valid,
  and accessable by you. You may specify an optional subject line and a
  text message comment regarding the posting.
  
  The address list follows the same format as that described in 
  'help mail send'.
  
  Example:
    news/mailto general/5 Wizard=Confused//What did you mean exactly by that?
  
  See Also: mail, news, folder
  
& FIRSTOF()
& ALLOF()
& STRFIRSTOF()
& STRALLOF()
& OFPARSE()
  Function: ofparse(<type>, [<eval1> [,<eval2> ... <evalN or delim>]])

  Type 1&3: ofparse(1,[<eval1> ,<eval2> ... <evalN>], <default>)
  Type 2&4: ofparse(1,[<eval1> ,<eval2> ... <evalN>], <output seperator>)
  Type 5&7: ofparse(1,[<eval1> ,<eval2> ... <evalN>], <default>)
  Type 6&8: ofparse(1,[<eval1> ,<eval2> ... <evalN>], <output seperator>)
  
  This function will take each <eval> and returns it based on the <type>.
  
  The following types exist:
    1  -- Issue a firstof().  Essentially return the first <eval> that is
          a true boolean.  This stops evaluation on first true <eval>.
          The <default> is returned if no evals are met.  The <default>
          is the assumed argument if only passed a single argument.
    2  -- Issue an allof().  Essentially returning every <eval> that is
          a true boolean.  This evaluates every argument.
    3  -- This is the reverse of '1'.  It returns the first <eval> that
          is a false boolean.  IT stops evaluation on first false <eval>.
          This again assumes <default> if no other arguments.
    4  -- This is the reverse of '2'.  It returns every false <eval>
          boolean. This evaluates every argument.
    5  -- Issue a strfirstof().  Essentially returns the first <eval> that
          is a non-null string.  This stops evaluation on first non-null
          <eval>.
    6  -- Issues a strallof().  Essentially returns every <eval> that is
          a non-null string.  This evaluates everyu argument.
    7  -- This is the reverse of '5'.  It essentially will either return
          a null or the default value.
    8  -- This is the reverse of '6'.  It essentially will return
          a list of nulls if you have such in your list.  This evaluates
          every argument.
  
  For PennMUSH function lineup:
      firstof(x,y)    == ofparse(1,x,y)
      allof(x,y,z)    == ofparse(2,x,y,z)
      strfirstof(x,y) == ofparse(5,x,y)
      strallof(x,y,z) == ofparse(6,x,y,z)
  
{ see 'help ofparse2' for examples }

& OFPARSE2
  (CONTINUED)
  Function: ofparse(<type>, [<eval1> [,<eval2> ... <evalN or delim>]])

  Type 1&3: ofparse(1,[<eval1> ,<eval2> ... <evalN>], <default>)
  Type 2&4: ofparse(1,[<eval1> ,<eval2> ... <evalN>], <output seperator>)
  Type 5&7: ofparse(1,[<eval1> ,<eval2> ... <evalN>], <default>)
  Type 6&8: ofparse(1,[<eval1> ,<eval2> ... <evalN>], <output seperator>)
  Examples:
    > say ofparse(1,0,2)
    You say "2"
    > say ofparse(1,10,11,0)
    You say "10"
    > say ofparse(1,grab(the cat,mommy),grab(in the hat,daddy),#-1 Error)
    You say "#-1 Error"
    > say ofparse(2,#-1,#101,#2970,,#-3,0,#319,null(This Doesn't Count),|)
    You say "#101|#2970|#319"
    > say ofparse(2,foo, 0, #-1, bar, baz,)
    You say "foobarbaz"
    > say ofparse(2,foo, 0, #-1, bar, baz,%b)
    You say "foo bar baz"
    > say ofparse(3,get(%#/fullname), u(%#/ansiname), %n)
    You say, "Mike"
    > say ofparse(4,,  ,foo,@@(Nothing),%b,bar|baz,#-1,|)
    You say, "foo| |bar|baz|#-1"
  
  See Also: BOOLEAN VALUES, cor(), cand(), iter()

& OUTPUTPREFIX
  Command: OUTPUTPREFIX <string>
  Causes <string> to be output on a line by itself before printing the
  results of each command.  This command is intended for use by external
  robot programs, and may be restricted to players whose ROBOT flag is set.
  The OUTPUTPREFIX command must be entered in all capitals.
  
  See Also: @robot, OUTPUTSUFFIX, ROBOT
  
& OUTPUTSUFFIX
  Command: OUTPUTSUFFIX <string>
  Causes <string> to be output on a line by itself after printing the results
  of each command.  This command is intended for use by external robot
  programs, and may be restricted to players whose ROBOT flag is set.
  The OUTPUTSUFFIX command must be entered in all capitals.
  
  See Also: @robot, OUTPUTPREFIX, ROBOT
  
& page
  Command: p[age][/<switch>] <player-list> [=[<control>]<message>]
           p[age][/<switch>] ,<comma-delim-player-list> [=[<control>]<message>]
           p[age][/<switch>] <message> (if @toggled MUXPAGE)
           lp[age][/<switch>] <message to last person(s) you paged>
           rp[age][/<switch>] <message to last person who paged you>
           mrp[age][/<switch>] <message to player list in last page to you>
 
  Note: If you are paging people with spaces in their name, start the page
        with a comma.  i.e.  page ,player with space, player2 = message
  
  <control> is the formatter for the page (", ;, :, etc)
  
  This command sends <message> to <player-list>.  If you do not specify a 
  message, it tells a player that you are looking for them, and tell the 
  player where you are.  You may use either the player's name or alias, and 
  you may also give a string that uniquely matches the start of a player's 
  name on the WHO list.  You may specify from one to more players in a page 
  and you can use a comma to delimit the player list instead of a space for
  players that contain spaces in their names.  You can not however, mix 
  commas and spaces.
 
  You can format the message one of several ways by specifying ':', ';', or
  '"' as the first character of the message.  ':' and ';' format the message
  as 'From afar, <player> <message>', with ';' omitting the space between
  <player> and <message>.  '"' formats the message in normal page format
  (this is the default).
  
  Switches available:
    noansi -- show raw ansi (the %c/%x substitutions) instead of colors.
 
{ 'help page2' for more }
  
& page2  
  If your Idle attribute is set to something, then it is sent to anyone
  who successfully pages you.  This is useful for when you are away from
  your terminal for a short while.
  
  You can selectively disable pages from certain players with the '@lock/page'
  command (players must pass the lock in order to page you).  If someone
  cannot page you, they will be sent a message including of your Reject
  attribute if they try.  If someone pages you while you are not connected,
  they are sent a message including your Away attribute.
   
  Everyone you page is stored so that you may repeat the page to the entire
  list using the 'lpage' command.  To respond to someone who just paged you,
  you may use the 'rpage' command.
  
  NOTE:  You may set the MUXPAGE @toggle (@toggle me=muxpage) so that page
         works similiar to how you expect in MUX/TM3.  'lp' will still work
         the same.
  
  See Also: pose, say, whisper, :, ;, ", @pemit, @away, @idle, @reject,
            rpage, lpage, mrpage
  
& mrpage
  Command: mrpage[/<switch>] [[<control>]<message>]
  
  <control> is the formatter for the page (", ;, :, etc)
  
  This command will automatically page the last person(s) who paged you.
  This will in essence, page the entire list that you saw in the last page
  to you so that you can continue with multi-page messages.
  
  You need not specify a player name.  It accepts and understands all
  the format and commands that page would understand.
  
  Switches available:
    noansi -- show raw ansi (the %c/%x substitutions) instead of colors.
  
  See Also: page, lpage, whisper, say, pose
  
& rpage
  Command: rpage[/<switch>] [[<control>]<message>]
  
  <control> is the formatter for the page (", ;, :, etc)
  
  This command will automatically page the last person who paged you.
  You need not specify a player name.  It accepts and understands all
  the format and commands that page would understand.
  
  Switches available:
    noansi -- show raw ansi (the %c/%x substitutions) instead of colors.
  
  See Also: page, lpage, mrpage, whisper, say, pose
  
& lpage
  Command: lpage[/<switch>] [[<control>]<message>]
  
  <control> is the formatter for the page (", ;, :, etc)
  
  This command will automatically page the last person(s) who you paged.
  You need not specify a player name.  It accepts and understands all
  the format and commands that page would understand.
  
  Switches available:
    noansi -- show raw ansi (the %c/%x substitutions) instead of colors.
  
  See Also: page, rpage, mrpage, whisper, say, pose
  
  
& pose
  Command: pose[/<switches>] <message>
  Displays <message> to everyone in your current room, preceded by your name
  and optionally a space.  Example: the command 'pose jumps for joy' produces
  '<yourname> jumps for joy'.
  
  No switches are available for the ':' or ';' shorthands.
   
  The following switches are available:
     /default - (default) Put a space between your name and the message
                (IE, display '<name> <message>').
     /nospace - Don't put a space between your name and the message
                (IE, display '<name><message>').
     /noansi   - Show the string literally and don't process ansi.  Only
                 useful with ZENTY_ANSI enabled (at compiletime).
 
  See Also: page, say, whisper, :, ;, "
  
& quit    
  Command: QUIT 
  Logs you out and disconnects you from the game. Must be in all upper case.
  
  See Also: LOGOUT
  
& read
  Command: read [<object>]
  Displays the description of <object>, or the room you're in if you don't
  specify an object.  Specifying object as <name> or #<dbref> or 'me' or
  'here' is legal.  You can also use look to look at objects held by other
  people, just use 'read <person>'s <object>'.
 
  You may use the /outside switch to look at the location of your current
  location (useful if you are inside a vehicle or other object).  You may
  also look at other objects in the 'outer' location, but you may not
  use the possessive form with the /outside switch (IE: "read/outside
  <person>'s <object>" won't work).
  
  'look' is the same as 'read'.
  
  See Also: examine, touch, taste, listen, smell
  
& ;
  Command: ;<message>
  This command is much like the ':' command, except that no space is inserted
  between your name and the action.  Example: the command ';'s watch beeps.'
  produces '<yourname>'s watch beeps.'.
 
  Warning: This command does not work in command lists run from an attribute
  because the ';' is treated as the command separator.  Use pose/nospace
  instead.
  
  If you have a space after the ';' it will use the ':' format instead.
 
  See Also: page, pose, say, whisper, :, "
  
& :
  Command: :<message>
  Displays <message> to everyone in your current room, preceded by your name
  and a space.  Example: the command ':jumps for joy' produces
  '<yourname> jumps for joy'.
  
  If you have a space after the ':' it will use the ';' format instead.
  
  See Also: page, pose, say, whisper, ;, "
  
& "
  Command: "<message>
  Says <message> out loud to everyone in your current room.  Example:
  the command '"Where is the movie theater?' produces
  '<yourname> says "Where is the movie theater>"'.  Note that the closing
  double quote is automatically added.
  
  See Also: page, pose, say, :, ", @saystring
  
& #
  Command: #<number> <command>
  Forces the object whose database number is <number> to perform <command>.
  Example: '#1033 move north' forces object #1033 to go north (assuming that
  you control it).  The same restrictions that apply to @force also apply to
  this command.
  
  See Also: @force
  
& \\
  Command: \\<message>
  Outputs <message> to everyone in your current room without embellishment.
  Example: the command '\\A chill falls over the room.' produces
  'A chill falls over the room.'
  
  See Also: @emit, @oemit, NOSPOOF
  
& say
  Command: say[/<switches>] <message>
  Says <message> out loud to everyone in your current room. You can also
  use '"<message>'.  No switches are allowed with the '"' shorthand.
  
  The following switches exist for the say command:
    /noansi    - Show the string literally and don't process ansi.  Only
                 useful with ZENTY_ANSI enabled (at compiletime).
  
  See Also: page, pose, whisper, :, ;, ", @saystring
  
& score
  Command: score
  Displays how much money you have.  Helpful to see if any machines are
  looping.
  
  See Also: @ps, LOOPING, inventory
  
& SESSION
  Command: SESSION
  Displays information on how many characters you have sent and received
  during this session, and which (Internal) port you are connected to on the
  mush.  It must be typed in all uppercase.
 
  Example:
   > SESSION
                                   Characters Input----  Characters Output---
  Player Name     On For Idle Cmds Pend  Lost     Total  Pend  Lost     Total
  Mortal           00:06   0s   16    0     0        44   156     0      2679
  2 Players logged in.
 
  Pending characters are those waiting to be acted on as commands (for input)
  or waiting to be sent out over the network (output).  Lost characters are
  due to overflowing either the MUSH's input or output buffers, either as the
  result of running a single command that produces too much output (such as
  @find and @search commands that match a large number of objects), or from
  typing too much on one line.
 
  Note: your Pending count for output will always be nonzero, as the output
  of the SESSION command hasn't been sent out over the network yet.
  
  See Also: WHO, DOING
  
& take
  Command: take[/<switch>] <object>
           take[/<switch>] <exit>
           take[/<switch>] <object>'s <sub-object>
 
  The first form picks up <object> from your location and adds it to your
  inventory.  It will fail if the object is locked against you, or if you
  are inside a player or object that you don't control and which isn't
  set ENTER_OK.
 
  The second form takes an exit from your location and adds it to you.
  Anyone inside you may then use the exit to travel to the exit's destination.
  You may take exits that you own, and exits owned by others in locations that
  you own.
 
  The third form takes <sub-object> from <object> and adds it to your
  inventory.  <object> must be ENTER_OK and <sub-object> must not be locked
  against you for this to work.  The lock on <object> is not checked.
  
{ 'help take2' for more }
  
& take2
  The following switch is recognized:
     /quiet   - Don't perform the @osucc/@asucc or @ofail/@afail attributes
                on the target object.  This switch only works if you control
                the object.
 
  <object> and <sub-object> may be either players or things.
  'get' is the same as 'take'.
  
  See Also: drop, @afail, @asucc, @fail, @ofail, @osucc, @succ, ENTER_OK,
            FAILURE, SUCCESS
  
& throw
  Command: throw[/<switch>] <object>
           throw[/<switch>] <exit>
 
  The first form removes <object> from your inventory and puts it in your
  location, except for the following special cases: Dropping a STICKY thing
  sends it home, and dropping a thing in a room with a drop-to sends the
  thing to the drop-to location.
 
  The second form removes <exit> from your list of exits and adds it to the
  list of exits for the current location.  Anyone in the same location as
  you may then use the exit to travel to the exit's destination.  You can
  only drop exits when you own the location where you are dropping them.
 
  The following switch is recognized:
     /quiet   - Don't perform the @odrop/@adrop attributes on the dropped
                 object.  This switch only works if you control the object.
 
  'drop' is the same as 'throw'.
  
  See Also: get, @adrop, @drop, @odrop, DROP-TO, STICKY
  
& use
  Command: use <object>
  Uses <object>.  Some objects will do interesting, useful, or dangerous
  things when used, for instance, using a camera should result in a 
  picture being taken.
  
  See Also: @ause, @ouse, @use
  
& version
  Command: version
  Displays the version of MUSH that is running and the date it was last
  rebuilt.
  
  See Also: +uptime
  
& whisper
  Command: whisper <player>=<message>
  Whispers the message to the named person, if they are in the same room as
  you. No one else can see the message that you whisper.
 
  You can format the message one of several ways by specifying ':', ';', or
  '"' as the first character of the message.  ':' and ';' format the message
  as 'You sense <player> <message>', with ';' omitting the space between
  <player> and <message>.  '"' formats the message in normal whisper format
  (this is the default).
  
  See Also: page, pose, say, :, ;, "
  
& doing
  Command: DOING <prefix>
  Displays a list of players currently connected to the MUSH.
  The DOING report tells you how long a player has been on, how long they
  have been inactive, and what they are doing (if they have used the @doing
  command).  If <prefix> is specified, only players whose names start with
  <prefix> are listed.  There are two forms of the DOING listing.  One
  shows GUILDS (an arbitrary attribute called 'guild' on a player) and
  the other has just the basic information.  The GUILD field in the DOING
  can be optionally changed to another field.  If you see another field than
  'Guilds' the default value has been changed.
  
  Also, if enabled, you may see either a '*' or the actual bit of the staff
  when you do a DOING.
  
  Note:  DOING must be in all caps to work.
   
  See Also: @doing, WHO
  
& who
  Command: WHO <prefix>
  Displays a list of players currently connected to the MUSH.
  The WHO report tells you how long a player has been on, how long they
  have been inactive, and what they are doing (if they have used the @doing
  command).  If <prefix> is specified, only players whose names start with
  <prefix> are listed.  There are two forms of the WHO listing.  One
  shows GUILDS (an arbitrary attribute called 'guild' on a player) and
  the other has just the basic information.  The GUILD field in the DOING
  can be optionally changed to another field.  If you see another field than
  'Guilds' the default value has been changed.
  
  Also, if enabled, you may see either a '*' or the actual bit of the staff
  when you do a WHO.
  
  Note:  WHO must be in all caps to work.
  
  See Also: @doing, DOING
  
& wanderer
  Reference: wanderer
  
  The wanderer is what shows up on the default WHO/DOING listing for the mush.
  This is in effect a reference to show you are new to the mush and have been
  on for only a short bit.  However, depending on the guidelines of the mush
  you are on, this meaning can be changed arbitrarily.  Also, the value of
  'Wanderer' in the 'Guild' field in the WHO/DOING can be changed to something
  else as well depending on the configuration on that particular RhostMUSH.
  
  There also is a flag 'wanderer' that gets set on any new player.  This will
  in effect disable all building of the player (wizard/immortal overrides
  this flag) until this flag is removed.  
  
  For wizards wanting to remove this on new player creation, please see the
  wizard help for the 'start_build' config parameter.

& ]
  Command: ]<command>
  
  This tells the parser that the command following it is to not be parsed.
  
  See Also: train

& >
  Command: ><attribute> <object in cluster>[=<value>]
  Synonym: @cluster/set <object> = <attribute>:[<value>]
   
  Sets the attribute named <attribute> on <object> to <value>.  If
  <attribute> is not a predefined attribute (like ofail or va), then it is
  created.  Attributes so created are called user-named attributes.
  Attribute names may only contain letters, numbers, and the characters
  < -_.@#$^&*~?=+| >, and must start with a letter.  The names of user-named
  attributes may not be abbreviated (an attempt to get the value of the
  attribute will fail, and an attempt to set will create a new attribute).
  
  The object that is chosen will be either the object in the cluster that
  already contains the attribute, or the object in the cluster with the
  least number of attributes currently on it.
  
  Specifying an object not in the cluster will return an error.
  
  Attributes must start with an alpha character, or in special cases any
  of the following characters: ~_#.+
  
  Example:
    >myattr ClusterObj=This is my data on attribute 'myattr'
    Set.
   
  See Also: @set, @cluster set, VATOVZ, ZATOZZ, &

& &
  Command: &<attribute> <object>[=<value>]
           &`<tree-attribute> <object>[=<value>]
  Synonym: @set <object> = <attribute>:[<value>]
   
  Sets the attribute named <attribute> on <object> to <value>.  If
  <attribute> is not a predefined attribute (like ofail or va), then it is
  created.  Attributes so created are called user-named attributes.
  Attribute names may only contain letters, numbers, and the characters
  < -_.@#$^&*~?=+| >, and must start with a letter.  The names of user-named
  attributes may not be abbreviated (an attempt to get the value of the
  attribute will fail, and an attempt to set will create a new attribute).
  The & command may be used to set predefined attributes (in this instance,
  '&<attr> <object>=<value>' is equivalent to '@<attr> <object>=<value>').
  
  Attributes must start with an alpha character, or in special cases any
  of the following characters: ~_#.+
  
  Starting with a '`' will tell it to use the TREE method for setting 
  attributes which will attempt to set/validate all branches to the tree
  prior to setting it.
  
  Example:
    &myattr Object=This is my data on attribute 'myattr'
    Set.
   
  See Also: @set, @cluster set, VATOVZ, ZATOZZ, >, ATTRIBUTE TREES
  
& @@
  Command: @@ <args>
 
  This command does nothing, therefore it is useful for putting comments into
  a MUSH program.  Be careful that ()'s and {}'s in the (otherwise ignored)
  arguments are nested correctly, lest your command-ending ; be trapped
  inside.
 
  Example:
     @va me=$foobar *:@fo #1234=%0;@@ This controls my foobar puppet.
  
  See Also: @break, @assert, idle
  
& @assert
  Command: @assert <value> [=<command(s)>]
  
  The @assert command is used to optionally break out of any processing of
  commands.  The possible values to pass to it are zero (0) or non-zero
  (which is any number but zero (0)...).  If a non-zero is passed to this 
  command, then it treats it as a NOOP and continues processing as if nothing 
  occurred.  However, if a zero number is passed to this command.  The 
  processing of the command stops there and no further processing is done.
  
  Available Switches:
    /queued -- process the <commands(s)> by queuing them (default).
    /inline -- process the <commands(s)> inline and do not queue them.
  
  This works opposite of @break.
  
  Example:
    > @create obj
    > @set obj=!halt inherit
    > @va obj=$test *:@pemit %#=Before assert;@assert %0;@pemit %#=After assert
    > test 1
      Before assert
      After assert
    > test 0
      Before assert
  
  See Also: $-COMMAND, @@, @break, @skip

& @break
  Command: @break[/switch] <value> [=<command(s)>]
  
  The @break command is used to optionally break out of any processing of
  commands.  The possible values to pass to it are zero (0) or non-zero
  (which is any number but zero (0)...).  If a zero is passed to this command,
  then it treats it as a NOOP and continues processing as if nothing occurred.
  However, if a non-zero number is passed to this command.  The processing
  of the command stops there and no further processing is done.
  
  Available Switches:
    /queued -- process the <commands(s)> by queuing them (default).
    /inline -- process the <commands(s)> inline and do not queue them.
  
  Example:
    > @create obj
    > @set obj=!halt inherit
    > @va obj=$testme *:@pemit %#=Before break;@break %0;@pemit %#=After break
    > testme 0
      Before break
      After break
    > testme 1
      Before break
  
  See Also: $-COMMAND, @@, @assert, @skip
  
& @chown
  Command: @chown <object>[=<player>]
           @chown <object>/<attr>[=<player>]
  The first form changes the ownership of <object> to <player> (default is
  to yourself).  Objects may be things, rooms or exits. To chown things, you
  have to be carrying the thing. For rooms or exits, you have to be in the
  room. Objects must have the CHOWN_OK flag set before they may be @chowned.
  In a room, the command used must be @chown here = <name>, and for an object,
  you must be very specific.
 
  The second form changes the ownership of the indicated attribute on <object>
  to <player> (default is the owner of the object).  You may only @chown
  unlocked attributes.  You may @chown unlocked attributes on objects that
  you own to yourself, and you may also @chown attributes that you own on
  objects owned by others to the owner of the object.
 
  When an object is @chowned, all unlocked attributes on the object are
  automatically @chowned as well, locked attributes remain owned by their
  original owners.
 
  The HALTED flag is automatically set on the new copy of the object.
  Players can't be @chowned; they always own themselves. 
  
  See Also: @lock, @Unlock, CHOWN_OK, ATTRIBUTE OWNERSHIP
  
& @clone
  Command: @clone[/<switches>] <object>[=<newname/cost>]
 
  Creates an exact duplicate of <object> that is owned by you and (for things
  and exits) puts it in your current location.  You may have the object put
  in your inventory (or your exitlist in the case of cloning exits) by using
  the /inventory switch.
 
  You may clone your own objects, plus VISUAL objects owned by others.
  The INHERIT and ROYALTY bits of the (new) object are cleared when the object
  is cloned.  If <newname> is specified, it is used as the name instead of
  the original name.
 
  If you clone a linked exit, an attempt is made to link the clone to the
  same location.  Except when using the /inventory switch, you can only clone
  exits when you own your current location.
 
  If you clone a room with a drop-to, an attempt is made to link the drop-to
  to the same location.
 
  If the original object was owned by you, then the ACLONE attribute is run
  in the new attribute, otherwise the new object is set HALTED.  Exits and
  contents of cloned objects are not cloned.
  
{ 'help @clone2' for more }
  
& @clone2
  The following switches are available:
     /cost       - Treat the argument after the = as the cost of the new
                   object, not the name.
     /inherit    - Don't reset the INHERIT bit on the new object.
     /inventory  - Create the new object in your inventory (or your exitlist,
                   in the case of cloning exits).
     /location   - Create the new object in your location (default).
     /parent     - Set the new object's parent to be the template object and
                   don't copy the attributes.
  
  See Also: @create, @decompile, @destroy, VISUAL
  
& @cluster
  Command: @cluster[/<switch>] [[<arguments>][=<values>]]
  
  The @cluster command is used to 'cluster' or link together a set of 2 or
  more dbref#'s into a single entity to be used and accessed by a set of
  clustering commands and functions as the aforementioned single entity.
  This is used to allow more flexability of data storage, better organization
  and a way to allow better data handling of the database as a whole.
  
  For more help on what @cluster can do, please refer to the following
  switches available.  Individidual help is available with 
  'help @cluster <switch>'
  
  Switch      Description                Switch        Description
  ---------   -------------------------- -----------   -----------------------
    /new    - start new cluster          /add        - add dbref# to a cluster
    /del    - delete dbref# from cluster /clear      - purge cluster
    /list   - list cluster specifics     /threshold  - set threshold limit
    /action - set threshold action       /edit       - edit attr on cluster
    /set    - set/unset attr on cluster  /repair     - repair cluster
    /grep   - grep cluster for match     /reaction   - edit action on cluster
    /cut    - 'cut' dbref# from cluster  /trigger    - trigger attr in cluster
    /func   - Specify function action    /regexp     - use regexp pattern match
    /wipe   - Wipe attrib(s) in cluster
   
  See Also:  clusters, cluster functions, cluster commands, >

& @cluster wipe
  Command: @cluster/wipe <object>[/<wildattr>]
           @cluster/wipe/regexp <object>[/<wildattr>]
  
  The wipe switch, with an optional regexp switch addon, will wipe all matching
  attributes from every item in the cluster.  This works exactly like @wipe
  except is performed on the entirity of the cluster.
  
  Example:
    > @cluster/wipe #1234/va*
    Cluster wipe: 24 total objects, 0 no-match, 0 safe, 4 attributes wiped.
    > @cluster/wipe/regexp #1234/^..$
    Cluster wipe: 24 total objects, 0 no-match, 0 safe, 22 attributes wiped.
  
  See Also: clusters, cluster functinos, cluster commands, >

& @cluster new
  Command: @cluster/new <object>
  
  The new switch, takes the specified object and assigns it as a cluster 
  object.  Once defined as a cluster, new objects may be /added to the cluster
  or /deleted to the cluster.  A cluster should never become corr